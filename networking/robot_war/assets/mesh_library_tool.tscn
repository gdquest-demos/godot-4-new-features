[gd_scene load_steps=2 format=3 uid="uid://dric1v7rs2aej"]

[sub_resource type="GDScript" id="GDScript_7rhfo"]
script/source = "extends Node3D

@export var assets_path := \"res://networking/robot_war/assets/models/\"
@export var mesh_library_scene_target = \"res://networking/robot_war/assets/mesh_library_scene.tscn\"
@export var cell_size := 2


# Playing this scene will generate a MeshLibraryScene asset, to be exported after
func _ready() -> void:
	# Set environment for debugging
	var camera := Camera3D.new()
	add_sibling.call_deferred(camera)
	camera.make_current()
	
	var light := DirectionalLight3D.new()
	add_sibling.call_deferred(light)
	light.position = Vector3(0,10,0)
	light.look_at.call_deferred(Vector3(2,0,2))
	
	await get_tree().process_frame
	
	# Add nodes
	var dir = DirAccess.open(assets_path)
	if dir:
		dir.list_dir_begin()
		var file_name = dir.get_next()
		while file_name != \"\":
			if not dir.current_is_dir():
				if file_name.ends_with(\".glb\") or file_name.ends_with(\".tscn\"):
					var resource := ResourceLoader.load(assets_path + file_name)
					var node = resource.instantiate()
					add_child(node)
					node.owner = self
					node.position = Vector3(0,0,get_child_count() * cell_size)
					
					var mesh_node = node
					if not node is MeshInstance3D:
						for child in node.get_children():
							if child is MeshInstance3D:
								mesh_node = child
					set_editable_instance(node, true)
					var static_body := StaticBody3D.new()
					print(mesh_node.name)

					mesh_node.add_child(static_body)
					static_body.owner = self
					static_body.global_position = Vector3(0, cell_size/2.0, get_child_count() * cell_size)
					
					var collision_shape := CollisionShape3D.new()
					static_body.add_child(collision_shape)
					collision_shape.owner = self
					collision_shape.global_position = static_body.global_position
					collision_shape.shape = BoxShape3D.new()
					collision_shape.shape.size = Vector3.ONE * cell_size
					
			file_name = dir.get_next()
	else:
		print(\"An error occurred when trying to access the path.\")
	
	var middle_position := (get_child_count()*cell_size)/2.0
	camera.position = Vector3(-middle_position, 5, middle_position)
	camera.look_at.call_deferred(Vector3(0, 0, middle_position))
	
	var packed := PackedScene.new()
	packed.pack(self)
	ResourceSaver.save(packed, mesh_library_scene_target)

"

[node name="MeshLibraryTool" type="Node3D"]
script = SubResource("GDScript_7rhfo")
